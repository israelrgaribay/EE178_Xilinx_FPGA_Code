// File: linedraw.v
// This is the linedraw design for EE178 Lab #6.

// The `timescale directive specifies what the
// simulation time units are (1 ns here) and what
// the simulator time step should be (1 ps here).

`timescale 1 ns / 1 ps

// Declare the module and its ports. This is
// using Verilog-2001 syntax.

module linedraw (
    input wire go,
    output wire busy,
    input wire [7:0] stax,      // (x0)Starting X coordinate of line. On screen, 0x00 is left, 0xFF is right
    input wire [7:0] stay,      // (y0)Starting Y coordinate of line. On screen, 0x00 is top, 0xFF is bottom 
    input wire [7:0] endx,      // (x1)Ending X coordinate of line. On screen, 0x00 is left, 0xFF is right 
    input wire [7:0] endy,      // (y1)Ending Y coordinate of line. On screen, 0x
    output wire wr,             // Frame buffer write enable
    output wire [15:0] addr,    // Frame buffer address
    input wire pclk
    );
    wire signed [10:0] dx, dy, x1, x0, y1, y0, x1x0, y1y0, x_next, xb, xa, y_next, yb, ya, leave, in_loop;
    wire signed [11:0] e2, e2_gt_dy, e2_lt_dx, err_next;
    reg signed [10:0] x = 0;              // current X position
    reg signed [10:0] y = 0;              // current X position
    reg signed [11:0] err = 0;     // loop-carried value
    
    reg state = 0;
    
    assign x0 = {3'b0, stax}; // x start
    assign y0 = {3'b0, stay}; // y start
    assign x1 = {3'b0, endx}; // x end
    assign y1 = {3'b0, endy}; // y end
/*-------Datapath for dx, dy, right, and down------------------------------------------------------------------------*/
    assign x1x0 = x1 - x0;    // dx = x1 - x0
    assign y1y0 = y1 - y0;    // dy = y1 = y0
    
    assign right = !x1x0[10];     // Move right of the LSB is 0 
    assign down = !y1y0[10];      // Move down if the LSB is 0
    
    assign dx = right ? x1x0 : (-x1x0);
    assign dy = down ? (-y1y0) : y1y0; 
/*---------Datapath for err-------------------------------------------------------------------------------------------*/
    assign err_next = in_loop ? err2 : (dx + dy);
    assign err2 = e2_lt_dx ? (err1 + dx) : err1;
    assign err1 = e2_gt_dy ? (err + dy) : err;
    
    assign e2 = err << 1;       // Credit to Gustavo for helping me on this part
    
    assign e2_gt_dy = (e2 > dy) ? 1 : 0;
    assign e2_lt_dx = (e2 < dx) ? 1 : 0;
/*---------Datapath for x and y----------------------------------------------------------------------------------------*/
    assign x_next = in_loop ? xb : x0;
    assign xb = e2_gt_dy ? xa : x;
    assign xa = right ? (x + 1) : (x - 1);
    
    assign y_next = in_loop ? yb : y0; 
    assign yb = e2_lt_dx ? ya : y;
    assign ya = down ? (y + 1) : (y - 1);
    
    assign leave = ((x == x1) & (y == y1)) ? 1 : 0;
    
    assign in_loop = (state == 1);
    
    always @ (posedge pclk) 
    begin
        err <= err_next;
        x <= x_next;
        y <= y_next;
    end
    
    always @ (posedge pclk)
    begin
    case (state)
      0: if (go) state <= 1; // idle state
      1: if (leave) state <= 0; // running state
      default: state <= 0;
      endcase
    end
/*------------------------------------------------------------------------------------------------------------------------- */ 
    assign busy = in_loop;
    assign wr = in_loop;
    assign addr = {y[7:0], x[7:0]};

endmodule
